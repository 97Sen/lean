1、影响范围过大的测试，应该慎重考虑此测试的实现方式。如:使用当前数据库做删除重要表数据的测试，新建表数据测试；
2、任何有关于加锁，解锁的操作以及必须成对出现的操作：
      mysql (START TRANSACTION -- COMMIT； LOCK TABLES tb_city READ -- UNLOCK TABLES;）；
      java（lock--unlock); 等
3、对基础知识模糊不够深入，而错误使用；
4、功能内容的完整性；
5、代码中的硬编码问题；
6、对需求不够了解，未及时询问；
7、提交代码时未仔细检查，而遗漏或错交文件，导致的整个工程无法运行，编译不通过
8、代码中对于对象的使用，必须清楚该对象在后续所需做的行为，以及对这个对象操作后是否会改变该对象的内容导致后续使用出错；
      若需对对象重复使用时，而在最后需要保证对象的完整性时，使用深拷贝（即：clone( )， 必要时重写该方法）
9、编写功能时未考虑到多种情况，如：多数据源，多客户等；
10、测试中未涉及到关键的测试用例，以及全面考虑测试用例是否充足；
11、对异常信息的处理以及错误等级的处理，如try{}catch(){}finally{},thorws;  logger.error(), logger.info();
12、编码是否符合代码体系
13、修改了任何功能代码，都需要通知前端，以及POS端是否会对其造成影响，并做好POS端,服务器端的同步修改处理
14、修改了任何的表数据，字段等都需要在POS端，服务器端做相应的修改，并通知前端
15、增加了测试用例，以及实现了新的功能都需要更新相关的文档。
16、不懂就问。
17、与队友交接工作尽量详细的把细节以及步骤写清楚，可以的话自己写出来。
18、适当的协助队友
19、FIX BUG时不能急躁，要仔细想问题所在以及处理方式，必要时一步步的BeBug一步步的跟踪，注意记录其中的数据变化
