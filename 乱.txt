I TELL YOU
Let's Encrypt 提供免费的TLS（传输层安全性）证书

HTTPS是一种Web安全策略机制，可以保护网站免受协议降级攻击和cookie劫持

Snyk检查项目和应用程序员依赖的工具

Js：函数的自调用，函数表达式，函数匿名方法；

Ajax : 一种不用刷新整个页面便可与服务器通讯的办法
         （数据在客户端与服务器之间独立传输，服务器不再返回整个页面）
          eval()可以把一个字符串转为本地的JS代码来执行

WebSocket 协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信――允许服务器主动发送信息给客户端。
	(Ie<10不支持，主流浏览器都有很好的支持 ；高频，低延时信息交换)

ASM 是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。

CGLIB是一个强大的高性能的代码生成包

Groovy 是 用于Java虚拟机的一种敏捷的动态语言，它是一种成熟的面向对象编程语言，既可以用于面向对象编程，又可以用作纯粹的脚本语言。使用该种语言不必编写过多的代码，同时又具有闭包和动态语言中的其他特性。

REST，表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。

LDAP是轻量目录访问协议，英文全称是Lightweight Directory Access Protocol，一般都简称为LDAP。DAP目录以树状的层次结构来存储数据

数据库模式定义语言并非程序设计语言，DDL数据库模式定义语言是SQL语言（结构化查询语言）的组成部分。SQL语言包括四种主要程序设计语言类别的语句：数据定义语言(DDL)，数据操作语言(DML)，数据控制语言(DCL)和事务控制语言（TCL）。

AOP 面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。

RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。AOF是AppendOnly File的缩写，是Redis系统提供了一种记录Redis操作的持久化方案。在AOF生成的文件里。将忠实记录发生在Redis的操作，从而达到在Redisserver重新启动或者当机之后，继续恢复之前数据状态的机制。

Java中常用的数据库连接池有：DBCP 、C3P0、BoneCP、Proxool、DDConnectionBroker、DBPool、XAPool、Primrose、SmartPool、MiniConnectionPoolManager及Druid等

HTTP请求中的get请求一般用于信息的获取，使用url传递参数，对所发送信息的数量也有限制，一般在2000个字符，(查询和搜索)
	     post，一般用于修改服务器上的资源，对所发信息的数量无限制。

GC (垃圾回收器)

常用的对称加密算法有：DES、3DES、RC2、RC4、AES
常用的非对称加密算法有：RSA、DSA、ECC
使用单向散列函数的加密算法：MD5、SHA

throws出现在方法函数头；而throw出现在函数体。
throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。
两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。

 transient使用小结：
	1）一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。
	2）transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。
	3）被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。

创建静态内部类对象的一般形式为：  外部类类名.内部类类名 xxx = new 外部类类名.内部类类名()
创建成员内部类对象的一般形式为：  外部类类名.内部类类名 xxx = 外部类对象名.new 内部类类名()

clean package -Dmaven.test.skip=true

自动装箱就是Java自动将原始类型值转换成对应的对象

Linked 改快读慢；Array 读快改慢；Hash 两都之间

List 接口继承了 Collection 接口以定义一个允许重复项的有序集合。该接口不但能够对列表的一部分进行处理，还添加了面向位置的操作。
于Set接口提供的数据结构是数学意义上集合概念的抽象，因此它需要支持对象的添加、删除，而不需提供随机访问，Set中不包含重复的元素
	TreeSet 是二差树实现的,Treeset中的数据是自动排好序的，不允许放入null值。 HashSet 和 TreeSet 都实现 Cloneable 接口。
    	HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。 
	HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的 String对象
Map 接口不是 Collection 接口的继承。而是从自己的用于维护键-值关联的接口层次结构入手。按定义，该接口描述了从不重复的键到值的映射。改变操作允许您从映射中添加和除去键-值对。键和值都可以为 null。但是，您不能把Map 作为一个键或值添加给自身。

java的设计模式大体上分为三大类：
	创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。
	结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。
	行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。

泛型 ：即“参数化类型”
          下界：
	下界用super进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至Object
           上界：
	上界用extends关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。

java中有四种会话跟踪技术：cookie,session,url重写，隐藏域。

接口里面的方法不能有具体的实现，这说明接口是设计的结果，而抽象类是重构的结果
抽象类和接口都不能直接实例化。如果要实例化，涉及到多态。
	抽象类要实例化，抽象类定义的变量必须指向一个子类变量，这个子类继承并实现了抽象类所有的抽象方法。接口要实例化，接口定义的变量必须指向一个子类变量，这个子类继承并实现了接口所有的方法。
	抽象类中的抽象方法都要被实现，所以抽象方法不能是静态的static，也不能是私有的private。
抽象类有构造方法，接口没有构造方法
抽象类只能单继承，接口可以多继承
抽象类可以有普通方法，接口中的所有方法都是抽象方法
接口的属性都是public static final修饰的，而抽象的不是

静态变量前要加static关键字，而实例变量前则不加。
????????在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。

异常机制有这么一个原则如果在 catch 中遇到了 return 或者异常等能使该函数终止的话，那么有 finally 就必须先执行完 finally 代码块里面的代码然后再返回值。

都是final类，都不允许被继承；

String类长度是不可变的，StringBuffer和StringBuilder类长度是可以改变的； StringBuffer类是线程安全的，StringBuilder不是线程安全的；相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。	如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。StringBuilder 与 StringBuffer 有公共父类 AbstractStringBuilder(抽象类)。

HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。

栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方，Java自动管理栈和堆，程序员不能直接地设置栈或堆。 
堆：堆是heap，是所谓的动态内存，其中的内存在不需要时可以回收，以分配给新的内存请求，其内存中的数据是无序的，即先分配的和随后分配的内存并没有什么必然的位置关系，释放时也可以没有先后顺序。一般由使用者自由分配，malloc分配的就是堆，需要手动释放。 
堆栈:就是STACK。实际上是只有一个出入口的队列，即后进先出（First In Last Out），先分配的内存必定后释放。一般由，由系统自动分配，存放存放函数的参数值，局部变量等，自动清除。 
还有，堆是全局的，堆栈是每个函数进入的时候分一小块，函数返回的时候就释放了，静态和全局变量，new 得到的变量，都放在堆中，局部变量放在堆栈中，所以函数返回，局部变量就全没了。 

在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。 
当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 
堆内存用来存放由new创建的对象和数组。 在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 

在引入多线程后，由于线程执行的异步性，会给系统造成混乱，特别是在急用临界资源时，如多个线程急用同一台打印机，会使打印结果交织在一起， 难于区分。间接相互制约可以称为互斥，直接相互制约可以称为同步， 对于互斥可以这样理解， 线程 A 和线程 B 互斥访问某
个资源则它们之间就会产个顺序问题――要么线程 A 等待线程 B 操作完毕，要么线程 B 等待线程操作完毕， 这其实就
是线程的同步了。因此同步包括互斥，互斥其实是一种特殊的同步。
ThreadLocal 的作用和目的：用于实现线程内的数据共享，即对于相同的程序代码，多个模块在同一个线程中运行时要共享一份数据，而在另外线程中运行时又共享另外一份数据。
